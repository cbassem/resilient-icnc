/* *******************************************************************************
 *  Copyright (c) 2010-2014, Intel Corporation
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of Intel Corporation nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 *  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ********************************************************************************/

#include <src/dist/stealing_load_balancer.h>
#include <cnc/internal/dist/distributor.h>
#include <cnc/internal/scheduler_i.h>

#include <iostream>
#include <sstream>
#if defined(_DEBUG)
#define Eo(x) { Speaker spkr; spkr << " " << #x << " = " << (x); }
#else
#define Eo(x)
#endif

namespace CnC {
    namespace Internal
    {

        stealing_load_balancer::stealing_load_balancer( context_base & ctxt, scheduler_i & scheduler )
            : distributed_scheduler(ctxt, scheduler)
        {
            m_last = 0;
            int numProcs = distributor::numProcs();
            m_clientRequests = new tbb::atomic<int>[numProcs];
            m_sentRequests = new tbb::atomic<int>[1];
            for (int i = 0; i < numProcs; i++) m_clientRequests[i] = 0;
            for (int i = 0; i < numProcs; i++) m_sentRequests[i] = 0;
            //            progress();
        }

        stealing_load_balancer::~stealing_load_balancer()
        {
            delete[] m_sentRequests; m_sentRequests = 0;
            delete[] m_clientRequests; m_clientRequests = 0;

        }

        void stealing_load_balancer::progress( unsigned int nsif )
        {
            if( nsif < FEW_STEPS && m_sentRequests[0].compare_and_swap( 1, 0 ) == 0 ) {
                {Speaker spkr; spkr << "stealing_load_balancer: requesting more steps";}
                if( ! bcast_work_request() ) {
                    m_sentRequests[0] = 0;
                }
            }
        }

        void stealing_load_balancer::recv_work_request( CnC::serializer* ser, int senderId )
        {
            Eo("stealing recv_work_request");
            // for now we don't care if an older work request is still unhandled
            m_clientRequests[senderId] = 1;
        }

        void stealing_load_balancer::on_received_workchunk( CnC::serializer* ser, int senderId, int n )
        {
            {Speaker spkr; spkr << "stealing_load_balancer::on_received_workchunk";}
            // we received work, so we have to rest the sent request status
            // this does not prevent unnecessary new request: we might get multiple responses to the same request
            // and we reset this here before we know how many we will get (we just don't know)
            if( m_sentRequests[0].compare_and_swap( 1, 0 ) == 0 ) {
                // in case we actually did reset the the request state we could try to make progress
                // for now we just do nothing
            }
        }

        bool stealing_load_balancer::migrate_step( unsigned int nsif, schedulable * s )
        {
            progress( nsif );
            if( nsif <= ENOUGH_STEPS ) return false;
            int n = distributor::numProcs();
            int me = distributor::myPid();
            int last = (m_last++)%n;
            // Look for a work request and if found, migrate step and return true
            for( int i = 1; i <= n; ++n ) {
                int client = i % n;
                if( client != me && m_clientRequests[client].compare_and_swap( 0, 1 ) == 1 ) {
                    {Speaker spkr; spkr << "stealing_load_balancer: sending steps";}
                    send_steps_to_client( client, &s, 1 );
                    return true;
                }
            }
            // we didn't find a work request, so we keep the step
            return false;
        }

    } // namespace Internal
} // namespace CnC
